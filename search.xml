<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java-JVM系列 java GC]]></title>
      <url>http://code.andyadc.com/2017/04/30/java-jvm-gc/</url>
      <content type="html"><![CDATA[<p>GC（Garbage Collection 垃圾回收）的概念随着 java 的流行而被人们所熟知。 实际 GC 最早起源于20世纪60年代的 LISP 语言，是一种自动的内存管理机制。 GC 要解决的问题有 3 个：</p>
<ol>
<li>回收什么？（what）</li>
<li>何时回收？（when）</li>
<li>如何回收？（how）</li>
</ol>
<h2 id="回收什么？"><a href="#回收什么？" class="headerlink" title="回收什么？"></a>回收什么？</h2><p>清理的是垃圾，回收的是内存空间。<br>既然 GC 是 java 的自动内存管理机制，那么先看下 java 虚拟机将所管理的内存划分为不同的区域，如图1。</p>
<p><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/java/jvm/2017-04-30-1.png" alt=""></p>
<p>如图1所示，java 虚拟机管理的内存区域分为如下几个部分：</p>
<ol>
<li>堆（Heap）</li>
<li>方法区（Method Area）</li>
<li>虚拟机栈（VM Stack）</li>
<li>本地方法栈（Native Method Stack）</li>
<li>程序计数器（Program Counter Register）</li>
</ol>
<p>其中堆和方法区属于所有线程共享，而其他区域属于线程隔离的区域。<br>下面我们以 java HotSpot 虚拟机为例分别说说每个区域的作用和构成：</p>
<h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><p>堆用于存储对象实例，从内存回收的角度看，由于收集器基本都采用了分代收集算法，所以堆可以进一步细分为：</p>
<ul>
<li>Eden 区</li>
<li>Survivor 0 区 （From）</li>
<li>Survivor 1 区 （To）</li>
<li>Old/Tenured 区</li>
</ul>
<p>其中 Eden、S0、S1 组成了新生代（Young/New Generation），Old/Tenured 为老年代。</p>
<h3 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h3><p>方法区存储虚拟机加载的类信息、常量、编译代码等数据。 HotSpot 虚拟机使用永久代（Permanent Generation）来实现方法区。</p>
<h3 id="虚拟机栈（VM-Stack）"><a href="#虚拟机栈（VM-Stack）" class="headerlink" title="虚拟机栈（VM Stack）"></a>虚拟机栈（VM Stack）</h3><p>虚拟机栈描述的是 java 方法执行的内存模型，每个方法在执行时创建一个栈帧（Stack Frame）。 栈帧中存储内容主要包含：</p>
<ul>
<li>局部变量表</li>
<li>操作数栈</li>
<li>动态链接</li>
<li>方法返回地址</li>
</ul>
<p>每个方法的执行过程就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
<h3 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h3><p>本地方法栈与虚拟机栈类似，只不过服务于虚拟机执行 Native 方法时。 HotSpot 虚拟机的实现把虚拟机栈和本地方法栈合二为一。</p>
<h3 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h3><p>可以看作是线程执行的字节码的行号指示器，在虚拟机的概念模型中便于实现分支、循环、跳转、异常处理和线程切换恢复等基础功能。 每个线程都有一个独立的程序计数器。</p>
<p>GC 管理的内存区域主要是堆（Heap），而堆中存放的是对象实例，因此 GC 回收的就是“死亡”（不可能再被使用）的对象占用的内存空间。</p>
<h2 id="何时回收？"><a href="#何时回收？" class="headerlink" title="何时回收？"></a>何时回收？</h2><p>既然说到“死亡”的对象，那不得不说下对象的生命周期。<br>虚拟机通过 new 指令创建了对象，大多数对象创建时在 Eden 区分配内存空间，而一些大对象若 Eden 区不能满足其空间需求时会直接在 Old/Tenured 区分配。<br>对象的死亡判定，主流的 GC 实现都是通过可达性分析，形象点来说就是在基于引用建立的对象图中形成了孤岛的对象就是死亡的（可回收的）。</p>
<h3 id="GC-分类"><a href="#GC-分类" class="headerlink" title="GC 分类"></a>GC 分类</h3><ul>
<li>Minor GC</li>
<li>Major GC</li>
<li>Full GC</li>
</ul>
<p>Minor GC 是针对新生代的回收，当 Eden 区空间满了时将触发 Minor GC。<br>Major GC 是针对老年代的回收，当 Minor GC 发生时会拷贝对象到老年代，这个过程称为对象晋升（promotion）或老年化（tenuring）。<br>为了避免对象晋升时老年代空间不足，收集器总是尝试预测剩余的空间是否足够以避免对象晋升失败，当晋升失败时就会发生 Full GC。<br>Full GC 是针对整个堆的操作，是非常昂贵的操作。除了在对象晋升失败时发生 Full GC，当堆自动调整大小时（Heap-Resizing）也会发生，不过可以通过设置 -Xms和-Xmx为相同的值来避免 Heap-Resizing。</p>
<h2 id="如何回收？"><a href="#如何回收？" class="headerlink" title="如何回收？"></a>如何回收？</h2><ul>
<li>Minor GC 将新生代中存活的对象拷贝到 Survivor 区和 Tenured 区。</li>
<li>Major GC 针对老年代区域进行死亡对象标记、清除和内存整理。</li>
<li>Full GC 则包括了所有存活对象的晋升以及老年代的内存回收及整理。</li>
</ul>
<p>前面泛泛而谈了3种垃圾收集方式的过程，而具体则是由垃圾收集器来实现。<br>截至 JDK 1.7 HotSpot 虚拟机提供的垃圾收集器如图2所示，一共有 7 种不同作用的收集器。<br>图中连线表明它们可以搭配使用。</p>
<p><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/java/jvm/2017-04-30-2.png" alt=""></p>
<h3 id="Serial-Collector"><a href="#Serial-Collector" class="headerlink" title="Serial Collector"></a>Serial Collector</h3><p>如其名，串行的单线程收集器，是目前虚拟机运行在 client 模式下的默认新生代收集器。</p>
<h3 id="ParNew-Collector"><a href="#ParNew-Collector" class="headerlink" title="ParNew Collector"></a>ParNew Collector</h3><p>相当于 Serial 的多线程版本。</p>
<h3 id="Parallel-Scavenge-Collector"><a href="#Parallel-Scavenge-Collector" class="headerlink" title="Parallel Scavenge Collector"></a>Parallel Scavenge Collector</h3><p>与 ParNew 很像，但它的关注点在达到一个可控制的吞吐量（Throughput），这里吞吐量的定义是 CPU 用于运行用户代码的时间与 CPU总消耗时间的比值。<br>因此 Parallel Scavenge 收集器也经常称为吞吐优先收集器，它还有个特点是自适应调节策略。 虚拟机会根据当前系统的运行情况收集监控信息，动态调整 Eden与Survivor区比例、晋升老年代对象年龄等参数，以提供最合适的停顿时间或最大的吞吐量。</p>
<h3 id="Serial-Old-Collector"><a href="#Serial-Old-Collector" class="headerlink" title="Serial Old Collector"></a>Serial Old Collector</h3><p>相当于 Serial 收集器的老年代版本。</p>
<h3 id="Parallel-Old-Collector"><a href="#Parallel-Old-Collector" class="headerlink" title="Parallel Old Collector"></a>Parallel Old Collector</h3><p>相当于 Parallel Scavenge 收集器的老年代版本。</p>
<h3 id="Concurrent-Mark-Sweep-CMS-Collector"><a href="#Concurrent-Mark-Sweep-CMS-Collector" class="headerlink" title="Concurrent Mark Sweep (CMS) Collector"></a>Concurrent Mark Sweep (CMS) Collector</h3><p>前述的收集器在执行时都会停止所有的用户线程执行（Stop-The-World）<br>CMS 收集器的关注点则是尽可能地缩短垃圾收集时用户线程的停顿时间，让垃圾收集和用户线程并行执行，从而减少应用停顿时间，提升用户体验。<br>当然在获得低停顿的好处时是付出了吞吐量的代价，通常与 Parallel 系收集器相比吞吐率下降 10%-40%。</p>
<p>CMS 收集器的处理整个过程有如下步骤:</p>
<ol>
<li>初始标记：找到 GC Roots。</li>
<li>并发标记：标记所有从 GC Roots 可达的对象。</li>
<li>并发预清理：检查对象引用更新和在并发标记阶段晋升到老年代的对象并进行标记。</li>
<li>重新标记：标记预清理阶段更新的对象引用。</li>
<li>并发清理：回收死亡对象的内存。</li>
<li>并发重置：重置数据结构为下次运行作准备。</li>
</ol>
<p>其执行示意如图3所示</p>
<p><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/java/jvm/2017-04-30-3.png" alt=""></p>
<p>其中步骤1（初始标记）和步骤4（ 重新标记）仍然需要 Stop The World，只是相对来说时间较短。</p>
<p>低停顿是 CMS 收集器是的优点，但它也并不完美，它有 3 个明显缺点：</p>
<ol>
<li>由于和用户线程并发执行，所以存在 CPU 争抢的问题。</li>
<li>无法回收浮动垃圾。</li>
<li>CMS 仅进行了标记、清除而未进行整理，容易产生大量内存空间碎片。</li>
</ol>
<p>CMS 默认启动的回收线程是 (CPU数量 + 3) / 4，也就是 CPU 在 4 个以上时并发回收线程使用的 CPU 资源不少于 25%。 在并发清理时新产生的垃圾称为浮动垃圾（Floating Garbage），本次无法收集，当浮动垃圾过多导致预留的内存无法满足程序需要时触发， 就可能出现 Concurrent Mode Failure 导致启用 Serial Old 收集器作为后备进行 Full GC。</p>
<h3 id="Garbage-First-G1-Collector"><a href="#Garbage-First-G1-Collector" class="headerlink" title="Garbage First (G1) Collector"></a>Garbage First (G1) Collector</h3><p>一种新的收集器，在 jdk7u4 开始正式支持，它有如下特点：</p>
<h4 id="多分区的堆组织方式"><a href="#多分区的堆组织方式" class="headerlink" title="多分区的堆组织方式"></a>多分区的堆组织方式</h4><p>G1 也是分代收集器，但其组织堆的方式与其他收集器完全不同。它根据不同的用途将堆分为大量（~2000）固定大小的区域（region）。 相同用途的堆也并不连续，G1 依然保留了新生代和老年代的概念，但新生代和老年代不再是物理上隔离的了，它们都是一部分 region 的集合，如图4所示。</p>
<p><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/java/jvm/2017-04-30-4.png" alt=""></p>
<p>如果一个对象大小超过了普通区域大小的50%，那么它会被分配到一个大区域（humongous）里面。</p>
<h4 id="优先的收集方式"><a href="#优先的收集方式" class="headerlink" title="优先的收集方式"></a>优先的收集方式</h4><p>G1 的收集方式追求低停顿，并且建立可预测的停顿时间模型（在 M 毫秒的时间片段内，GC 的时间不得超过 N 毫秒，N &lt; M）。 G1 通过有计划的避免在整个堆中进行全区域扫描进行垃圾收集，它通过跟踪各个 region 中垃圾的价值大小（回收获得的空间及回收所花费的时间的经验值）， 在后台维护一个优先级列表，每次根据允许的收集时间，优先回收价值最大的 region，这也正式 Garbage-First 名称的由来。 而对 region 的收集采用的是 Stop-The-World 的方式，增量的将存活的对象复制到一个空 region 里面，这种方式不会产生内存碎片问题。</p>
<p>最后我们引用 <a href="http://www.infoq.com/articles/Java_Garbage_Collection_Distilled" target="_blank" rel="external">Java Garbage Collection Distilled</a> 一文中的关于 GC 的折衷权衡点来总结下。</p>
<blockquote>
<p>俗话说：“从来没有不劳而获，当我们得到某些事物的时候，通常不得不放弃另外一些事物”。<br>当谈论垃圾收集的时候，我们主要考虑三个收集器的指标：  </p>
<ol>
<li>吞吐量：花费在 GC 上的时间占整个应用程序工作的比例。  </li>
<li>延迟：因为垃圾回收，而引起的响应暂停的时间。  </li>
<li>内存：我系统使用内存来存储状态，在管理的时候它们常常需要复制和移动。</li>
</ol>
</blockquote>
<p>上述三个指标，吞吐量越大越好，延迟越低越好，内存复制和移动产生的碎片越少越好。<br>但可惜这三个目标很难同时满足，很多时候我们都是根据应用类型在其中做出权衡取舍。</p>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Github 空间搭建 Hexo 技术博客]]></title>
      <url>http://code.andyadc.com/2016/12/11/Hexo-Basic/</url>
      <content type="html"><![CDATA[<h2 id="部署前介绍"><a href="#部署前介绍" class="headerlink" title="部署前介绍"></a>部署前介绍</h2><h3 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么"></a>Hexo 是什么</h3><ul>
<li>Hexo 的中文官网：<a href="http://hexo.io/zh-cn/" target="_blank" rel="external">http://hexo.io/zh-cn/</a></li>
<li>作者 Tommy Chen：<a href="https://zespia.tw/" target="_blank" rel="external">https://zespia.tw/</a></li>
<li>在我的理解里面：Hexo 是一个基于 Node.js 快速、简洁且高效的博客框架，可以将 Markdown 文件快速的生成静态网页，托管在 GitHub Pages 上。</li>
<li>而官网自己是这样说的：</li>
</ul>
<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<h3 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h3><ul>
<li>只想搭建一个技术博客的人（真心别搞太多，你没那么多精力）</li>
</ul>
<h3 id="搭建所需软件"><a href="#搭建所需软件" class="headerlink" title="搭建所需软件"></a>搭建所需软件</h3><ul>
<li>各个软件官网：<ul>
<li>git：<a href="http://git-scm.com/" target="_blank" rel="external">http://git-scm.com/</a></li>
<li>node.js：<a href="http://nodejs.org/" target="_blank" rel="external">http://nodejs.org/</a></li>
</ul>
</li>
</ul>
<h3 id="文章前提"><a href="#文章前提" class="headerlink" title="文章前提"></a>文章前提</h3><ul>
<li>如果你对上面要求的软件一个都不了解的话，建议你先看如下内容（只是让你们先了解下，当时别照着文章内容做）：<ul>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="http://www.jianshu.com/p/858ecf233db9" target="_blank" rel="external">通过Hexo在Github上搭建博客教程</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a></li>
<li><a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">手把手教你建github技术博客</a></li>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="http://www.jianshu.com/p/e858a90d0a17" target="_blank" rel="external">windows下搭建hexo博客并将其部署到GitCafe终极教程</a></li>
<li><a href="http://www.jianshu.com/p/db7e64d86067" target="_blank" rel="external">使用Hexo搭建博客（三），博客配置、主题和写作</a></li>
<li><a href="http://www.jianshu.com/p/e7413116e9d4" target="_blank" rel="external">Hexo搭建WiKi</a></li>
<li><a href="https://www.zhihu.com/question/28058973" target="_blank" rel="external">怎么用hexo上传一个README.md到github?</a></li>
</ul>
</li>
</ul>
<h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><ul>
<li>如果你一开始就打算要绑定域名，则下面教程中所有可以填写域名的地方你都填写上你要绑定的域名，如果你没独立域名，那就使用 Github 默认给你的：username.github.io 域名即可。</li>
</ul>
<hr>
<h2 id="部署开始"><a href="#部署开始" class="headerlink" title="部署开始"></a>部署开始</h2><h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><ul>
<li>双击运行 <strong>Git-2.9.9.1-64-bit.exe</strong>，接下来一律下一步，不需要多余的选择，假设你安装的目录位置跟我一样：C:\Program Files\Git</li>
<li>打开 Git Bash（路径：C:\Program Files\Git\git-bash.exe），输入：<code>git --version</code><ul>
<li>如下图，如果出现：<strong>git version 2.9.3.windows.1</strong>，这表示安装成功</li>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/check-git-version.png" alt="验证 git 安装"></li>
</ul>
</li>
</ul>
<h3 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h3><ul>
<li>双击运行 <strong>node-v6.6.0-x64.msi</strong>，接下来一律下一步，不需要多余的选择。</li>
<li>安装完之后，打开 Git Bash，输入：<code>npm -v</code><ul>
<li>如下图，如果出现：<strong>3.10.3</strong>，则表示 Node.js 安装成功。如果你没有显示这个信息，我怀疑你需要重启电脑试试看，因为我在给我弟讲解这一步的时候发现有这个问题。</li>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/check-node-npm-version.png" alt="验证 node.js 安装"></li>
</ul>
</li>
</ul>
<h3 id="Node-js-源设置"><a href="#Node-js-源设置" class="headerlink" title="Node.js 源设置"></a>Node.js 源设置</h3><ul>
<li>在安装 Hexo 之前，先说一下 Node.js 的源，Node.js 官方源默认是：<a href="http://registry.npmjs.org" target="_blank" rel="external">http://registry.npmjs.org</a>，但是由于在国外，说不定你使用的时候就抽风无法下载任何软件。所以我们决定暂时使用淘宝提供的源，淘宝源官网：<a href="http://npm.taobao.org/" target="_blank" rel="external">http://npm.taobao.org/</a></li>
<li>在 Git Bash 中我们执行下面这一句（这是一整句的）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org \</span></div><div class="line">--cache=<span class="variable">$HOME</span>/.npm/.cache/cnpm \</div><div class="line">--disturl=https://npm.taobao.org/dist \</div><div class="line">--userconfig=<span class="variable">$HOME</span>/.cnpmrc"</div></pre></td></tr></table></figure>
<ul>
<li>现在验证下是否可以使用淘宝的 cnpm 命令：<code>cnpm info express</code><ul>
<li>如果能输出一大堆介绍，则说明成功了，以后每次要使用淘宝的源都需要这样来。现在除了默认的 <strong>npm</strong>，还多了一个 <strong>cnpm</strong> 可以使用，我们下面有关安装的讲解内容也都是基于此临时命令。</li>
<li>如果输出：bash: cnpm: command not found，则表示没成功，需要你在排查下</li>
</ul>
</li>
</ul>
<h3 id="安装-Hexo-框架"><a href="#安装-Hexo-框架" class="headerlink" title="安装 Hexo 框架"></a>安装 Hexo 框架</h3><ul>
<li>安装 Hexo（注意，现在是 cnpm 开头了，不是 npm 了）：<code>cnpm install -g hexo-cli</code><ul>
<li>安装时间不一定很快，有可能需要等 3 ~ 5 分钟。</li>
<li>安装完有 WARN 警告也没关系的。</li>
</ul>
</li>
</ul>
<h3 id="创建-Hexo-项目"><a href="#创建-Hexo-项目" class="headerlink" title="创建 Hexo 项目"></a>创建 Hexo 项目</h3><ul>
<li>现在假设我要创建一个名为 hexo 的项目，项目目录就放在：D:\Workspace\blog 目录下，所以我们在 D:\Workspace\blog 目录下创建一个 hexo 目录。现在这个项目的全路径是：D:\Workspace\blog\hexo</li>
<li>打开 Git Bash：<ul>
<li>进入该目录：<code>cd D:/Workspace/blog/hexo</code></li>
<li>然后执行：<code>hexo init</code>，这个时间也会比较长，也有可能要等几分钟，有显示 WARN 也不用管</li>
<li>最后执行：<code>cnpm install</code>，有显示 WARN 也不用管</li>
<li>安装完成之后，D:\Workspace\blog\hexo 目录结构是这样的：<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/hexo-init-file-catalog.png" alt="安装 hexo 后的目录结构"></li>
</ul>
</li>
<li>现在我们启动 hexo 本地服务，看下默认的博客是怎样的，命令：<code>hexo server</code></li>
<li>现在用浏览器访问：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，效果如下图<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/hexo-default-theme-home-page.png" alt="默认模板效果"></li>
</ul>
</li>
<li>如果要停止 hexo 服务：在 Git Bash 下按 <code>Ctrl + C</code> 即可</li>
</ul>
</li>
</ul>
<h3 id="选用其他主题"><a href="#选用其他主题" class="headerlink" title="选用其他主题"></a>选用其他主题</h3><ul>
<li>由于默认主题太大众了，所以现在我们换个主题。</li>
<li>你可以去这里找主题：<ul>
<li>hexo-theme：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></li>
<li>hexo-github-theme-list：<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Themes</a></li>
<li>有那些好看的hexo主题？：<a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external">http://www.zhihu.com/question/24422335</a></li>
</ul>
</li>
<li>我这里选择的 <strong>yelee</strong>：<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">https://github.com/MOxFIVE/hexo-theme-yelee</a><ul>
<li>原因是能最大化衬托出：目录、文章内容、代码块。因为我对这个博客的定位就是用来放技术类内容，所以不会让它太杂或是太花。只是目前这个颜色偏浅，后续还需要调整。</li>
</ul>
</li>
<li>现在假设你跟我要用的模板是一样：<ul>
<li>还是让 Git Bash 保持在 D:\Workspace\blog\hexo 目录下，然后输入命令：<code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</code></li>
<li>这样就在 D:\Workspace\blog\hexo\themes 目录下生成了一个 yelle 文件夹，里面有我们刚刚 clone 下来的主题内容。</li>
<li>如果以后你不自己修改这个主题的话，可以考虑经常更新下作者的更新内容：<ul>
<li><code>cd D:/Workspace/blog/hexo/themes/yelee</code></li>
<li><code>git pull origin master</code></li>
</ul>
</li>
</ul>
</li>
<li>下载好主题文件之后，我们现在要修改 D:\Workspace\blog\hexo 目录下的项目配置文件：<strong>_config.yml</strong>，把对应的主题目录名改下，编辑如下图。<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/hexo-modify-theme.png" alt="修改主题目录"></li>
</ul>
</li>
<li>更改主题目录名后，我们还要重新生成主题静态内容：<ul>
<li>继续在 Git Bash 中输入命令：<ul>
<li>重新生成静态博客的所有内容：<code>hexo generate</code></li>
<li>重启 hexo 本地服务：<code>hexo server</code></li>
<li>重新访问：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，效果如下图</li>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/hexo-yalee-theme-home-page.png" alt="新主题效果"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="创建-Github-pages-并-SSH-授权"><a href="#创建-Github-pages-并-SSH-授权" class="headerlink" title="创建 Github pages 并 SSH 授权"></a>创建 Github pages 并 SSH 授权</h3><ul>
<li>现在假设你已经有一个 Gtihub 账号，你还需要一个特别的仓库，特别在仓库名就是你的 Github 账号登录名，比如我的用户名是：andyadc，那我要创建的仓库名字完整滴填写是：andyadc.github.io，具体效果如下图。<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/create-gitpages-repository.png" alt="创建 github pages"></li>
</ul>
</li>
<li>创建好仓库之后，要本地生成 SSH 秘钥，方便电脑上的 git 软件好提交内容到 Github 上<ul>
<li>在 Git Bash 中，输入：<code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code>，然后回车，回车，再回车，一共 3 次回车，具体含义自己 Google。</li>
<li>比如我的：<code>ssh-keygen -t rsa -C &quot;andaicheng@gmail.com&quot;</code>，生成后效果如下图：</li>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/ssh-keygen.png" alt="生成 ssh 密钥"></li>
<li>此时，生成密钥后，在你电脑目录：C:\Users\你的计算机用户名\.ssh 下，会生成两个文件：<ul>
<li>私钥：<strong>id_rsa</strong></li>
<li>公钥：<strong>id_rsa.pub</strong></li>
<li>如果生成的不是这样的文件，那删除掉这两个生成的，重新执行上面的命令，让它再一次生成。</li>
</ul>
</li>
<li>现在用记事本打开 id_rsa.pub，复制文件中的所有内容。<ul>
<li>访问：<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a>，添加新秘钥，效果如下图<ul>
<li>Title：自己随便取</li>
<li>Key：把刚刚复制的都粘贴进来</li>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/github-add-ssh-keys.png" alt="添加密钥"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="把本地的博客内容同步到-Github-上"><a href="#把本地的博客内容同步到-Github-上" class="headerlink" title="把本地的博客内容同步到 Github 上"></a>把本地的博客内容同步到 Github 上</h3><ul>
<li>要把本地的静态博客同步到 Github，我们还需要先安装两个跟部署相关的 hexo 插件：<ul>
<li>继续在 Git Bash 中输入：</li>
<li><code>cnpm install hexo -server --save</code></li>
<li><code>cnpm install hexo-deployer-git --save</code></li>
</ul>
</li>
<li>编辑全局 hexo 的配置文件：<strong>_config.yml</strong><ul>
<li>官网对此配置的介绍：<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/configuration.html</a></li>
<li>我自己的编辑内容初稿（你需要认真看的是含有中文注释的内容）：</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site，这一块区域主要是设置博客的主要说明，需要注意的是：每个冒号后面都是有一个空格，然后再书写自己的内容的</span></div><div class="line">title: Andy Code</div><div class="line">subtitle: Andy<span class="string">'s Blog</span></div><div class="line">description: xxxx</div><div class="line">author: Andy An</div><div class="line">email: andaicheng@gmail.com</div><div class="line">language: zh-CN</div><div class="line">timezone:</div><div class="line"></div><div class="line"># URL，这一块一般可以设置的是 url 这个参数，比如我要设置绑定域名的，这里就需要填写我的域名信息</div><div class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child<span class="string">' and root as '</span>/child/<span class="string">'</span></div><div class="line">url: http://blog.andyadc.com</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: yelee</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## 这里是重点，这里是修改发布地址，因为我们前面已经加了 SSH 密钥信息在 Github 设置里面了，所以只要我们电脑里面持有那两个密钥文件就可以无需密码地跟 Github 做同步。</div><div class="line">## 需要注意的是这里的 repo 采用的是 ssh 的地址，而不是 https 的。分支我们默认采用 master 分支，以后你翅膀硬了要换其他也无所谓。</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:andyadc/andyadc.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li>编辑全局配置后我们需要重新部署：<ul>
<li>继续在 Git Bash 中输入命令：</li>
<li>先清除掉已经生成的旧文件：<code>hexo clean</code></li>
<li>再生成一次静态文件：<code>hexo generate</code></li>
<li>在本地预览下：<code>hexo server</code></li>
<li>本地没问题之后，Ctrl + C 停掉本地预览。</li>
<li>在部署到 Github 之前，需要先确定你是否已经用过 Git，如果你没用过，则此时你需要做如下设置，在 Git Bash 中依次输入下面两个命令：<ul>
<li><code>git config --global user.email &quot;你的 Github 注册邮箱地址&quot;</code></li>
<li><code>git config --global user.name &quot;你的 Github 用户名&quot;</code></li>
</ul>
</li>
<li>使用部署命令部署到 Github 上：<code>hexo deploy</code>，有弹出下面提示框，请输入：<code>yes</code><ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/hexo-git-deploy-confirm.png" alt="确认提交"></li>
</ul>
</li>
<li>提交成功效果如下：<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/hexo-git-deploy-success.png" alt="提交成功"></li>
</ul>
</li>
<li>访问服务器地址进行检查：<a href="http://andyadc.github.io" target="_blank" rel="external">http://andyadc.github.io</a>，效果如下<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/hexo-server-preview.png" alt="服务器效果"></li>
</ul>
</li>
<li>但是，也不排除你 deploy 不了到 Github，报这个错误：<code>Host key verification failed</code>，那解决办法如下：<ul>
<li>还是在 Git Bash 界面中，输入如下命令：<code>ssh -T git@github.com</code>，根据界面提示，输入：<code>yes</code> 回车。之后你可以再试一下是否可以 deploy。</li>
</ul>
</li>
</ul>
</li>
<li>通过上面几次流程我们也就可以总结：以后，每次发表新文章要部署都按这样的流程来：<ul>
<li><code>hexo clean</code></li>
<li><code>hexo generate</code></li>
<li><code>hexo deploy</code></li>
</ul>
</li>
<li>也因为这几个命令太频繁了，所以又有了精简版的命令：<ul>
<li><code>hexo clean == hexo clean</code></li>
<li><code>hexo g == hexo generate</code></li>
<li><code>hexo s == hexo server</code></li>
<li><code>hexo d == hexo deploy</code></li>
</ul>
</li>
</ul>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ul>
<li>绑定域名不排除会遇到很多网络问题或是七七八八，所以这里先提供先官网的一些说明：<ul>
<li><a href="https://help.github.com/articles/setting-up-your-pages-site-repository/" target="_blank" rel="external">https://help.github.com/articles/setting-up-your-pages-site-repository/</a></li>
<li><a href="https://help.github.com/articles/quick-start-setting-up-a-custom-domain/" target="_blank" rel="external">https://help.github.com/articles/quick-start-setting-up-a-custom-domain/</a></li>
<li><a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="external">https://help.github.com/articles/setting-up-an-apex-domain/</a></li>
<li><a href="https://help.github.com/articles/troubleshooting-custom-domains/" target="_blank" rel="external">https://help.github.com/articles/troubleshooting-custom-domains/</a></li>
<li><a href="https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites/" target="_blank" rel="external">https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites/</a></li>
</ul>
</li>
<li>首先我们要一个 CNAME 文件（文件名叫 CNAME，没有文件后缀的），把该文件放在 D:\Workspace\blog\hexo\source 目录下，以后一些需要放在根目录的资源文件都可以放这里。如果你找不到这样的文件可以到我的项目上下载：<a href="https://github.com/andyadc/andyadc.github.io" target="_blank" rel="external">https://github.com/andyadc/andyadc.github.io</a><ul>
<li>CNAME 上的内容需要写你具体要绑定的域名信息，比如我是：<strong>blog.andyadc.com</strong>，具体你可以参考下图：<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/add-cname.png" alt="设置 CNAME 文件"></li>
</ul>
</li>
</ul>
</li>
<li><p>接着我们需要到 阿里云 上设置域名解析</p>
<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/github-pages-domain-resolution.png" alt="设置域名解析"></li>
</ul>
</li>
<li><p>设置好之后，等过几分钟域名解析好之后，我们访问：<a href="http://blog.andyadc.com" target="_blank" rel="external">http://blog.andyadc.com</a>，效果如下：    </p>
<ul>
<li><img src="http://andyadc-image.oss-cn-shanghai.aliyuncs.com/blog-hexo-image/domain-resolution-success.png" alt="域名访问效果"></li>
<li>Github 提示，建议我们使用 CNAME 方式来指向，别用 IP，所以建议你这样配置，还是以我的为例：<ul>
<li>主机记录：blog</li>
<li>记录类型：CNAME</li>
<li>记录值：andyadc.github.io.（后面的这个点别忘记了）</li>
<li>还有，要记得把 CNAME 那个文件再 deploy 到 Github 哦，不然还是访问不了的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Hexo-新文章内容的开头"><a href="#Hexo-新文章内容的开头" class="headerlink" title="Hexo 新文章内容的开头"></a>Hexo 新文章内容的开头</h3><ul>
<li>hexo 新文章内容的开头需要这样定义：<ul>
<li>categories：表示文章所属分类</li>
<li>tags：表示文章所属标签</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 这是文章标题</div><div class="line">date: 2016-12-11 17:58:27</div><div class="line">categories: [Hexo,IntelliJ IDEA]</div><div class="line">tags: [Hexo,IntelliJ IDEA,Git,Github,Node.js]</div><div class="line">---</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="主题配置介绍"><a href="#主题配置介绍" class="headerlink" title="主题配置介绍"></a>主题配置介绍</h3><p>我这里只讲自己在使用的 yelle 主题，你可以参考下，可能还有一些改动我后续会自己在慢慢改，但是大体基本也就这样了。</p>
<p>从中我们也可以看出，对于主题来讲，大部分可以配置的地方其实都是在这里的，所以对于主题的使用者来讲，懂这里很重要。</p>
<ul>
<li>基本上主题的配置文件都是有内容改，但是下面这几点我觉得特别重要：</li>
<li><code>duoshuo</code>，如果你是打算采用多说评论系统的话，你需要设置这里</li>
<li><code>youyan</code>，有言也是国内实用比较多的评论系统之一，个人感觉相对比较稳定</li>
<li><code>open_in_new</code>，我个人觉得这个东西就应该是 true，不是用新标签的都是坏人</li>
<li><code>baidu_tongji</code>，我个人使用的是百度统计，具体百度统计的使用可以查看百度统计官网：<a href="http://tongji.baidu.com" target="_blank" rel="external">http://tongji.baidu.com</a></li>
</ul>
<h3 id="我的-yelle-主题配置"><a href="#我的-yelle-主题配置" class="headerlink" title="我的 yelle 主题配置"></a>我的 yelle 主题配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># &gt;&gt;&gt; Basic Setup | 基础设置 &lt;&lt;&lt;</span></div><div class="line"></div><div class="line"><span class="comment"># Header | 主菜单</span></div><div class="line"><span class="comment">## About Page: `hexo new page about`</span></div><div class="line"><span class="comment">## Tags Cloud Page: `hexo new page tags`</span></div><div class="line">menu:</div><div class="line">  主页: /</div><div class="line">  关于我: /about/</div><div class="line">  标签云: /tags/</div><div class="line">  所有文章: /archives/</div><div class="line">  IntelliJ IDEA: /tags/IntelliJ IDEA</div><div class="line"></div><div class="line"><span class="comment"># Link to your avatar | 填写头像地址</span></div><div class="line">avatar: /img/avatar.png</div><div class="line"></div><div class="line"><span class="comment"># Small icon of Your site | 站点小图标地址</span></div><div class="line">favicon: /favicon.png</div><div class="line"></div><div class="line"><span class="comment"># If your site' url is 'http://yoursite.com/blog', set root_url as '/blog/'</span></div><div class="line"><span class="comment"># 网站若存放在子目录，请按上面格式填写</span></div><div class="line"><span class="comment"># https://hexo.io/docs/configuration.html#URL</span></div><div class="line">root_url: </div><div class="line"></div><div class="line"><span class="comment"># Social info. Bar | 社交信息展示</span></div><div class="line"><span class="comment">## Keep "mailto:" in Email | 设置 Email 时保留 "mailto:"</span></div><div class="line"><span class="comment">## Encrypt email 加密邮件地址 http://ctrlq.org/encode/</span></div><div class="line"><span class="comment">## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件</span></div><div class="line"><span class="comment">## https://github.com/hexojs/hexo-generator-feed</span></div><div class="line"></div><div class="line">subnav:</div><div class="line">  Email: <span class="string">"mailto:andaicheng@gmail.com"</span></div><div class="line">  <span class="comment">#新浪微博: "sina weibo"</span></div><div class="line">  GitHub: <span class="string">"https://github.com/andyadc"</span></div><div class="line">  RSS: <span class="string">"/atom.xml"</span></div><div class="line">  <span class="comment">#V2EX: "#"</span></div><div class="line">  <span class="comment">#知乎: "zhihu"</span></div><div class="line">  <span class="comment">#豆瓣: "douban"</span></div><div class="line">  <span class="comment">#简书: "jianshu"</span></div><div class="line">  <span class="comment">#SegmentFault: ""</span></div><div class="line">  <span class="comment">#网易云音乐: "netease"</span></div><div class="line">  <span class="comment">#虾米音乐: "xiami"</span></div><div class="line">  <span class="comment">#Facebook: "#"</span></div><div class="line">  <span class="comment">#Google: "#"</span></div><div class="line">  <span class="comment">#Twitter: "#"</span></div><div class="line">  <span class="comment">#LinkedIn: "#"</span></div><div class="line">  <span class="comment">#QQ: "#"</span></div><div class="line">  <span class="comment">#微信: "Wechat"</span></div><div class="line">  <span class="comment">#PayPal: "#"</span></div><div class="line">  <span class="comment">#StackOverflow: "#"</span></div><div class="line">  <span class="comment">#Instagram: "#"</span></div><div class="line">  <span class="comment">#Flickr: "#"</span></div><div class="line">  <span class="comment">#reddit: ""</span></div><div class="line">  <span class="comment">#Medium: ""</span></div><div class="line">  <span class="comment">#TiddlyWiki: ""</span></div><div class="line">  <span class="comment">#Tumblr: ""</span></div><div class="line">  <span class="comment">#_500px: ""</span></div><div class="line"></div><div class="line"><span class="comment"># &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;</span></div><div class="line"><span class="comment"># Chose ONE as your comment system and keep others disable.</span></div><div class="line"><span class="comment"># 选一个作为网站评论系统，其他保持禁用。</span></div><div class="line"></div><div class="line">disqus: </div><div class="line">  <span class="comment">#on: true</span></div><div class="line">  shortname: </div><div class="line">  <span class="comment"># https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-</span></div><div class="line">  <span class="comment"># It is unnecessary to enable disqus here if </span></div><div class="line">  <span class="comment"># you have set "disqus_shortname" in your site's "_config.yml" </span></div><div class="line"></div><div class="line">duoshuo: </div><div class="line">  <span class="comment">#on: true</span></div><div class="line">  domain: </div><div class="line">  <span class="comment"># 是否开启多说评论，http://duoshuo.com/create-site/</span></div><div class="line">  <span class="comment"># 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分</span></div><div class="line">  <span class="comment"># http://&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)</span></div><div class="line"></div><div class="line">youyan:</div><div class="line">  on: <span class="literal">true</span></div><div class="line">  id: 1738968</div><div class="line">  <span class="comment"># 是否开启友言评论，http://www.uyan.cc/index.php</span></div><div class="line">  <span class="comment"># id 中填写你的友言用户数字ID，注册后进入后台管理即可查看</span></div><div class="line">  <span class="comment"># 友言服务在 Web 环境下运行，普通本地环境无法查看，请部署后在线上测试。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># &gt;&gt;&gt; Style Customisation 样式自定义 &lt;&lt;&lt;</span></div><div class="line"></div><div class="line"><span class="comment"># Background | 背景</span></div><div class="line"><span class="comment">## "5": show images form bg-1.jpg to bg-5.jpg in `/yelee/source/background/`</span></div><div class="line"><span class="comment">## "5": 显示`/yelee/source/background/`文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片</span></div><div class="line"><span class="comment">## "0": white-gray background | 淳朴灰白背景</span></div><div class="line">background_image: 0</div><div class="line"></div><div class="line">highlight_style:</div><div class="line">  on: <span class="literal">true</span></div><div class="line">  inline_code: 3  <span class="comment"># Value: 0 - 9 可选，3还不错</span></div><div class="line">  code_block: 2  <span class="comment"># Value: 0 - 4 </span></div><div class="line">  <span class="comment"># Set inline_code to style highlight text</span></div><div class="line">  <span class="comment"># Chose a highlight theme for code block</span></div><div class="line">  <span class="comment"># 通过 inline_code 切换内置文本高亮样式</span></div><div class="line">  <span class="comment"># 通过 code_block 切换内置代码高亮配色主题</span></div><div class="line"></div><div class="line">blockquote_style:</div><div class="line">  on: <span class="literal">true</span></div><div class="line">  blockquote: 3  <span class="comment"># Value: 0 - 7 可选</span></div><div class="line">  <span class="comment"># 自定义文章「引用部分」的样式</span></div><div class="line"></div><div class="line"><span class="comment"># 左边栏宽度 px</span></div><div class="line">left_col_width: 330</div><div class="line"></div><div class="line"><span class="comment"># Copyright info. of post | 文末版权信息</span></div><div class="line">copyright: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Table of contents | 文章目录</span></div><div class="line">toc: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 目录中标题不换行</span></div><div class="line"><span class="comment"># Keep TOC title on the same line | </span></div><div class="line">toc_nowrap: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 自定义"阅读全文"链接按钮的显示文字</span></div><div class="line"><span class="comment"># Customize the text on excerpt link</span></div><div class="line">excerpt_link: more</div><div class="line"></div><div class="line"><span class="comment"># 是否显示边栏中的搜索框（仅样式，未添加搜索功能）</span></div><div class="line"><span class="comment"># Search Box in left column</span></div><div class="line">search_box: <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># 是否开启主页及加载头像时的动画效果</span></div><div class="line"><span class="comment"># Animation in Homepage and Loading avatar</span></div><div class="line">animate: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Load jQuery UI to style tooltips</span></div><div class="line"><span class="comment"># 工具提示框样式美化</span></div><div class="line">jquery_ui: <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># &gt;&gt;&gt; Small features | 小功能设置 &lt;&lt;&lt;</span></div><div class="line"></div><div class="line"><span class="comment"># 是否开启边栏多标签切换</span></div><div class="line"><span class="comment"># Birdhouse button in left column</span></div><div class="line">tagcloud: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Blogroll, Link exchange | 友情链接</span></div><div class="line">friends:</div><div class="line">  GitHub: https://github.com/</div><div class="line">  IntelliJ IDEA: http://www.jetbrains.com/idea/</div><div class="line"><span class="comment">#friends: false</span></div><div class="line"></div><div class="line"><span class="comment">#是否开启“关于我”。</span></div><div class="line">aboutme: 此地只专注于技术</div><div class="line"><span class="comment">#aboutme: true</span></div><div class="line"></div><div class="line"><span class="comment"># 是否在新窗口打开链接</span></div><div class="line"><span class="comment"># Open ALL link in a new tab</span></div><div class="line">open_in_new: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Customize feed link 自定义订阅地址</span></div><div class="line">rss: /atom.xml</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># &gt;&gt;&gt; Vendors | 第三方工具 &amp; 服务 &lt;&lt;&lt;</span></div><div class="line"></div><div class="line"><span class="comment"># images viewer | 图片浏览器</span></div><div class="line"><span class="comment">## http://www.fancyapps.com/fancybox/</span></div><div class="line">fancybox: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># Display Math(LaTeX, MathML...) | 数学公式支持</span></div><div class="line"><span class="comment">## https://www.mathjax.org/</span></div><div class="line">mathjax: <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># Socail Share | 是否开启分享</span></div><div class="line">share: <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 百度、谷歌站长验证。填写 HTML 标签 content</span></div><div class="line"><span class="comment"># Site Verification for Google and Baidu. HTML label content.</span></div><div class="line">baidu_site: </div><div class="line">google_site: </div><div class="line"></div><div class="line"><span class="comment"># Fill in Google Analytics tracking ID, #e.g. UA-XXXXX-X</span></div><div class="line">google_analytics: </div><div class="line"></div><div class="line"><span class="comment"># 百度统计 http://sitecenter.baidu.com/sc-web/</span></div><div class="line"><span class="comment"># 查看代码，填入 //hm.baidu.com/hm.js? 之后的内容</span></div><div class="line">baidu_tongji: b68dade9d355a0b3d875d0ffbbe1f212</div><div class="line"></div><div class="line"><span class="comment"># 不蒜子网站计数设置</span></div><div class="line"><span class="comment"># http://ibruce.info/2015/04/04/busuanzi/</span></div><div class="line">visit_counter:</div><div class="line">  on: <span class="literal">true</span></div><div class="line">  site_visit: 本站到访数</div><div class="line">  page_visit: 本页阅读量</div><div class="line"></div><div class="line"><span class="comment"># GitHub Repo Widget</span></div><div class="line"><span class="comment"># https://github.com/hustcc/GitHub-Repo-Widget.js</span></div><div class="line">github_widget: <span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="常用页面添加"><a href="#常用页面添加" class="headerlink" title="常用页面添加"></a>常用页面添加</h2><h3 id="404、关于我、标签页"><a href="#404、关于我、标签页" class="headerlink" title="404、关于我、标签页"></a>404、关于我、标签页</h3><ul>
<li>还是以上一篇文章我们讲解的项目根目录上：E:\git_work_space\hexo，在该目录启动 Git Bash：</li>
<li>新增一个 404 页面：<code>hexo new page 404</code></li>
<li>新增一个 about 页面：<code>hexo new page about</code></li>
<li>新增一个 tag 标签云页面：<code>hexo new page tags</code></li>
<li>新增一个 robot.txt 文件，把该文件放在：E:\git_work_space\hexo\source 目录下，如果你没有该文件可以到我的项目上找：<a href="https://github.com/judasn/judasn.github.io" target="_blank" rel="external">https://github.com/judasn/judasn.github.io</a></li>
<li>robot 文件内容：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">User-Agent: *</div><div class="line">Allow: /</div><div class="line">Disallow: /background</div><div class="line">Disallow: /css</div><div class="line">Disallow: /fancybox</div><div class="line">Disallow: /font-awesome</div><div class="line">Disallow: /img</div><div class="line">Disallow: /js</div><div class="line">Sitemap: http://code.youmeek.com/sitemap.xml</div><div class="line">Sitemap: http://code.youmeek.com/baidusitemap.xml</div></pre></td></tr></table></figure>
<h3 id="置顶文章方法"><a href="#置顶文章方法" class="headerlink" title="置顶文章方法"></a>置顶文章方法</h3><ul>
<li>参考：<a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="external">解决Hexo置顶问题</a></li>
<li>编辑这个文件：<code>node_modules/hexo-generator-index/lib/generator.js</code></li>
<li>覆盖原文件内容，采用下面内容：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="string">'use strict'</span>;</div><div class="line"></div><div class="line">var pagination = require(<span class="string">'hexo-pagination'</span>);</div><div class="line"></div><div class="line">module.exports = <span class="keyword">function</span>(locals)&#123;</div><div class="line">  var config = this.config;</div><div class="line">  var posts = locals.posts;</div><div class="line"></div><div class="line">    posts.data = posts.data.sort(<span class="keyword">function</span>(a, b) &#123;</div><div class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</div><div class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="built_in">return</span> b.date - a.date; // 若top值一样则按照文章日期降序排</div><div class="line">            <span class="keyword">else</span> <span class="built_in">return</span> b.top - a.top; // 否则按照top值降序排</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</div><div class="line">            <span class="built_in">return</span> -1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</div><div class="line">            <span class="built_in">return</span> 1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">return</span> b.date - a.date; // 都没定义按照文章日期降序排</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  var paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line"></div><div class="line">  <span class="built_in">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    perPage: config.index_generator.per_page,</div><div class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    data: &#123;</div><div class="line">      __index: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>然后在文章头部的：Front-matter 位置加上一个：<code>top: 1000</code> 的内容。数值越大，越靠前</li>
</ul>
<h2 id="添加一些不希望被渲染的文件到-hexo"><a href="#添加一些不希望被渲染的文件到-hexo" class="headerlink" title="添加一些不希望被渲染的文件到 hexo"></a>添加一些不希望被渲染的文件到 hexo</h2><ul>
<li><p>因为我们使用的是 Github 项目做空间，所以一般项目我们都要放一个 README.md 文件，而我们希望这个文件不被 hexo 渲染成 HTML 文件，我们需要这样做：</p>
<ul>
<li>把 README.md 放在这个目录下：<code>hexo\source\README.md</code></li>
<li>编辑这个配置文件：<code>hexo\_config.yml</code>，找到这个关键字：<code>skip_render</code>，然后这样写：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">skip_render: </div><div class="line">    - README.md</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>有时候我们需要排除一整个目录，道理跟上面一样，比如你现在访问：<a href="http://code.YouMeek.com/i" target="_blank" rel="external">http://code.YouMeek.com/i</a>，你发现会跑到我的一个备份导航中，而我是通过这样配置来实现的：</p>
<ul>
<li>这里的 <code>i</code> 是我的目录名称，因为我的真正导航地址是：<a href="http://i.YouMeek.com" target="_blank" rel="external">http://i.YouMeek.com</a>，所以取这样的目录名字方便记忆。</li>
<li>而 <code>i/**</code> 这里的后缀的两个星号表示这个目录下包括子目录，其所有文件都被忽略渲染。</li>
<li>对于一些 HTML 和 CSS、JS 这类也要注意，hexo 有一套自己的渲染方式，比如可能会对你的 JS 做一些特殊处理，所以可能会让你的 JS 失效，所以最好按我这种方式来排除掉。<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">skip_render: </div><div class="line">  - README.md</div><div class="line">  - i/**</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="插件的基本使用命令"><a href="#插件的基本使用命令" class="headerlink" title="插件的基本使用命令"></a>插件的基本使用命令</h3><ul>
<li>插件官网：<a href="https://hexo.io/plugins/" target="_blank" rel="external">https://hexo.io/plugins/</a></li>
<li>安装插件：<code>npm install 插件名 --save</code></li>
<li>卸载插件：<code>npm uninstall 插件名</code></li>
<li>更新插件和博客框架（需要在 E:\git_work_space\hexo 目录下）：<code>npm update</code><ul>
<li>它实质上是通过项目根目录下 package.json 文件更新各大组件</li>
</ul>
</li>
</ul>
<h3 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h3><ul>
<li>支持RSS：<code>npm install hexo-generator-feed --save</code></li>
<li>生成站点地图：<code>npm install hexo-generator-sitemap --save</code></li>
<li>生成百度站点地图：<code>npm install hexo-generator-baidu-sitemap --save</code></li>
<li>HTML 压缩：<code>npm install hexo-html-minifier --save</code></li>
<li>JavaScript 压缩：<code>npm install hexo-uglify --save</code></li>
<li>CSS 压缩插件：<code>npm install hexo-clean-css --save</code></li>
<li>SEO优化：<code>npm install hexo-generator-seo-friendly-sitemap --save</code></li>
<li>搜索支持，需要主题有对应的设置：<code>npm install hexo-generator-search --save</code></li>
</ul>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
